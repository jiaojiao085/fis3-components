var cheerio = require('cheerio');
var Render = require('./libs/render.js');

/**
 * 拷贝新标签元素到兼容的元素标签
 * @param {[type]} $ [全局选择函数]
 * @param  {[type]} elem [新元素]
 * @param  {[type]} type [要转成的兼容元素标签]
 */
function cloneCoupleLabel($, elem, type, subClass) {
    var $elem = $(elem);
    var $newElem = $('<' + type + '></' + type + '>');
    $newElem.addClass(subClass);

    for (var key in elem.attribs) {
        $newElem.attr(key, elem.attribs[key]);
    }
    $newElem.html($elem.html());

    return $newElem;
}

/**
 * 创建单闭合标签
 * @param  {[type]} elem [description]
 * @param  {[type]} type [description]
 */
function cloneSingleLabel(elem, type) {
    var $newElem = $('<' + type + ' />');
}

/**
 * 转换tab元素
 * @param  {[type]} $       [description]
 * @param  {[type]} content [description]
 * @param  {[type]} label   [description]
 * @return {[type]}         [description]
 */
function transformTab($, content, label) {
    var $tabs = $('tab');

    // Render.renderTab($(content).find('tab').length);
    var $newDiv;

    /**
     * 依次处理tab元素
     * @param  {[type]} key      [description]
     * @param  {[type]} $elem){                     console.log(key);    } [description]
     * @return {[type]}          [description]
     */
    $tabs.each(function(key, elem) {

        var $newDiv = cloneCoupleLabel($, elem, 'ul', 'e-tab'); // 外层等块级元素
        var $items = $newDiv.find('item');
        var $contents = $newDiv.find('content');

        /**
         * 遍历tab的item
         * @param  {[type]} key     [description]
         * @param  {[type]} innerElem){                         var $newSpan [description]
         * @return {[type]}         [description]
         */
        $items.length && $items.each(function(key, innerElem) {
            var $newSpan = cloneCoupleLabel($, innerElem, 'li', 'e-tab-item'); // 里层的行内元素
            $(innerElem).replaceWith($newSpan); // 里层行内元素替换
        });

        /**
         * 遍历tab的content
         * @param  {[type]} key     [description]
         * @param  {[type]} innerElem){                         var $newSpan [description]
         * @return {[type]}         [description]
         */
        var $temElem = $('<div></div>');
        $contents.length && $contents.each(function(key, innerElem) {
            var $newSpan = cloneCoupleLabel($, innerElem, 'div', 'e-tab-content'); // 里层的行内元素
            $temElem.append($newSpan);
            $(innerElem).remove(); // 里层行内元素替换
        });
        $(elem).after($temElem.html()); // 行内元素添加到外层后面

        $(elem).replaceWith($newDiv); // 外层元素替换
    });

    return $;
}

/**
 * 转化html元素
 * @param  {[type]} $       [description]
 * @param  {[type]} content [description]
 * @param  {[type]} label   [description]
 * @return {[type]}         [description]
 */
function transformHTML($, content, label) {
    /**
     * 对不同元素标签进行分别处理
     * @param  {[type]} label [description]
     * @return {[type]}       [description]
     */
    switch (label) {
        case 'tab':
            $ = transformTab($, content, label);
            break;
        default:
            break;
    }

    return $;
}

module.exports = function(content, file, options) {
    var $ = cheerio.load(content);
    var labels = ['tab'];

    for (var i in labels) {
        $ = transformHTML($, content, 'tab');
    }

    return $.html(); // 处理后的文件内容
}
