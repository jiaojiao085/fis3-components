define('pages/index/main', function(require, exports, module) {

  /**
   * main
   * @require 'pages/index/index.scss' // 无需在页面中控制 css
   */
  
  var dialog = require('dialog');
  var tab = require('tab');
  var slider = require('slider');
  var searchBar = require('search-bar');
  var pageMenu = require('page-menu');
  var tpl = require('pages/index/index.tpl')
  
  var page = {
      $el: $('body'),
      init: function() {
          this._renderData();
          this._bindEvent();
  
          $('body').append(tpl({
              word:'KKK'
          }))
      },
  
      _renderData: function() {
          this._ajaxData();
      },
  
      _ajaxData: function() {
  
      },
  
      _bindEvent: function() {
          dialog.init();
          tab.init();
          slider.init();
          searchBar.init();
          pageMenu.init();
      }
  }
  
  module.exports = page;

});
;define('dialog', function(require, exports, module) {

  /**
   * main
   * @require 'widget/dialog/index.scss' // 无需在页面中控制 css
   */
  
  /**
   *  title   string  ''  浮层标题，用来填充模板
      content string  ''  浮层内容，用来填充模板
      button  array   ['确认']  浮层底部按钮的文字数组，建议不超过两个，与callback的index相互对应
      select  int 0   需要高亮的按钮索引（与button相互对应），高亮的按钮会添加类名select
      allowScroll bool    false   弹窗弹出后是否允许页面滚动
      callback    funtion function(){}    点击底部按钮后的回调函数，可以通过函数的第一个参数来获取点击的按钮索引（与button对应）
      animation   string  'pop'   弹窗弹出的动画类名，会自动为弹窗外层加上该类名
      end function    function(){}    弹窗弹出后或者消失后的回调，可以通过函数第一个参数来获取状态（'show'为弹出后，'hide'为消失后）
   */
  'use strict';
  
  var dialog = {
      $el: $('#ui-dialog'),
      init: function() {
  
          this._renderData();
          this._bindEvent();
      },
  
      _renderData: function() {
          this._ajaxData();
      },
  
      _ajaxData: function() {
  
      },
  
      _bindEvent: function() {
          var $dialog = this.$el.dialog('show');
  
          // $dialog.on("dialog:action",function(e){
          //     alert(1)
          // });
          // $dialog.on("dialog:hide",function(e){
          //     alert(2)
          // });
          // var dia = $.dialog({
          //     title: '温馨提示',
          //     content: '温馨提示内容',
          //     button: ["确认", "取消"]
          // });
  
      }
  }
  
  module.exports = dialog;
  

});
;define('tab', function(require, exports, module) {

  /**
   * main
   * @require 'widget/tab/index.scss' // 无需在页面中控制 css
   */
  
  /**
      autopaly    boolean false   自动播放
      interval    int 2000ms  自动播放间隔时间
      duration    int 300ms   切换动画过渡时间
      bounce  boolean true    反弹动画
      beforeScrollStart   function    function(){}    滑动开始前调用（参数：来源页from、切换页to）
      scrollEnd   function    function(){}    滑动结束时调用（参数：当前页 curPage）
      enable()    function    -   全局开关，开启滚动
      disable()   function    -   全局开关，禁止滚动
      refresh()   function    -   刷新当前位置
      destroy()   function    -   销毁对象
   */
  
  var tab = {
      $el: $('.ui-tab'),
      
      init: function() {
  
          this._renderData();
          this._bindEvent();
      },
  
      _renderData: function() {
          this._ajaxData();
      },
  
      _ajaxData: function() {
  
      },
  
      _bindEvent: function() {
          var $tab = new fz.Scroll('.ui-tab', {
              role: 'tab',
              autoplay: false,
              interval: 3000
          });
  
          /* 滑动开始前 */
          $tab.on('beforeScrollStart', function(from, to) {
              // from 为当前页，to 为下一页
          })
  
          /* 滑动结束 */
          $tab.on('scrollEnd', function(curPage) {
              // curPage 当前页
          });
      }
  }
  
  module.exports = tab;
  

});
;define('slider', function(require, exports, module) {

  /**
   * main
   * @require 'widget/slider/index.scss' // 无需在页面中控制 css
   */
  
  /**
      indicator   boolean true    指示点
      autopaly    boolean false   自动播放
      interval    int 2000ms  自动播放间隔时间
      duration    int 300ms   切换动画过渡时间
      bounce  boolean true    反弹动画
      beforeScrollStart   function    function(){}    滑动开始前调用（参数：来源页from、切换页to）
      scrollEnd   function    function(){}    滑动结束时调用（参数：当前页 curPage）
      enable()    function    -   全局开关，开启滚动
      disable()   function    -   全局开关，禁止滚动
      refresh()   function    -   刷新当前位置
      destroy()   function    -   销毁对象
   */
   
  var slider = {
      $el: $('#ui-slider'),
  
      init: function() {
  
          this._renderData();
          this._bindEvent();
      },
  
      _renderData: function() {
          this._ajaxData();
      },
  
      _ajaxData: function() {
  
      },
  
      _bindEvent: function() {
          var slider = new fz.Scroll('#ui-slider', {
              role: 'slider',
              indicator: true,
              autoplay: true,
              interval: 30000
          });
  
          slider.on('beforeScrollStart', function(from, to) {
              console.log(from, to);
          });
  
          slider.on('scrollEnd', function(curPage) {
              console.log(curPage);
          });
      }
  }
  
  module.exports = slider;
  

});
;define('search-bar', function(require, exports, module) {

  
  /**
   * main
   * @require 'widget/search-bar/index.scss' // 无需在页面中控制 css
   */
  
  'use strict';
  
  var searchBar = {
      $el: $('#ui-search-bar'),
      init: function() {
  
          this._renderData();
          this._bindEvent();
      },
  
      _renderData: function() {
          this._ajaxData();
      },
  
      _ajaxData: function() {
  
      },
  
      _bindEvent: function() {
          this.$el.on('click', '.ui-searchbar', function(){
              $('.ui-searchbar-wrap').addClass('focus');
              $('.ui-searchbar-input input').focus();
          });
          this.$el.on('click', '.ui-searchbar-cancel', function(){
              $('.ui-searchbar-wrap').removeClass('focus');
          });
      }
  }
  
  module.exports = searchBar;

});
;define('page-menu', function(require, exports, module) {

  /**
   * main
   * @require 'widget/page-menu/index.scss' // 无需在页面中控制 css
   */
  
  /**
      indicator   boolean true    指示点
      autopaly    boolean false   自动播放
      interval    int 2000ms  自动播放间隔时间
      duration    int 300ms   切换动画过渡时间
      bounce  boolean true    反弹动画
      beforeScrollStart   function    function(){}    滑动开始前调用（参数：来源页from、切换页to）
      scrollEnd   function    function(){}    滑动结束时调用（参数：当前页 curPage）
      enable()    function    -   全局开关，开启滚动
      disable()   function    -   全局开关，禁止滚动
      refresh()   function    -   刷新当前位置
      destroy()   function    -   销毁对象
   */
   
  var slider = {
      $el: $('#ui-page-menu'),
  
      init: function() {
  
          this._renderData();
          this._bindEvent();
      },
  
      _renderData: function() {
          this._ajaxData();
      },
  
      _ajaxData: function() {
  
      },
  
      _bindEvent: function() {
          var slider = new fz.Scroll('#ui-page-menu', {
              role: 'slider',
              indicator: true,
              autoplay: true,
              interval: 30000
          });
  
          slider.on('beforeScrollStart', function(from, to) {
              console.log(from, to);
          });
  
          slider.on('scrollEnd', function(curPage) {
              console.log(curPage);
          });
      }
  }
  
  module.exports = slider;
  

});
;define('pages/index/index.tpl', function(require, exports, module) {

  return function (it, opt) {
      it = it || {};
      with(it) {
          var _$out_= [];
          _$out_.push('<h3>',  word , '</h3>');
        return _$out_.join('');
      }
  }

});
